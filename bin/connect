#!/bin/bash

connect_main(){
  local without_update
  connect_detect_options "$@"

  local ip; connect_detect_ip
  local user; connect_detect_user

  local name=getto-labo
  local image=getto/labo-container:latest
  local timezone=Asia/Tokyo
  local work_dir=/home/$user
  local detach_keys=ctrl-@,ctrl-@
  local apps_volume=/docker-volumes/apps:/apps
  local home_volume=/docker-volumes/home:/home

  connect_update_images

  if [ "$(connect_container_exists)" ]; then
    docker attach $name \
      --detach-keys $detach_keys \
    ;
  else
    if [ "$(connect_container_exists -a)" ]; then
      docker rm $name
    fi

    docker run -it --rm \
      --name $name \
      --detach-keys $detach_keys \
      -e DOCKER_WRAPPER_VOLUMES=$apps_volume,$home_volume \
      -e LABO_IP=$ip \
      -e LABO_USER=$user \
      -e LABO_TIMEZONE=$timezone \
      -v $apps_volume \
      -v $home_volume \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -w $work_dir \
      $image
  fi
}
connect_detect_options(){
  if [ "$1" == "--without-update" ]; then
    without_update=true
  fi
}
connect_detect_ip(){
  if [ -z "$INTERFACE_NAME" ]; then
    echo "[FAILED] cannot detect interface name : set INTERFACE_NAME"
    exit 1
  fi

  ip=$(ip addr show $INTERFACE_NAME | grep "inet " | awk '{ print $2 }' | sed 's|/.*||')
  if [ -z "$ip" ]; then
    echo "[FAILED] cannot detect local ip address"
    exit 1
  fi
}
connect_detect_user(){
  if [ -n "$LABO_USER" ]; then
    user=$LABO_USER
  else
    if [ -n "$USER" ]; then
      user=$USER
    fi
  fi
  if [ -z "$user" ]; then
    echo "[FAILED] cannot detect user name : set USER or LABO_USER"
    exit 1
  fi
}
connect_update_images(){
  local target

  if [ -z "$without_update" ]; then
    connect_update_target $image

    if [ -f ~/.config/getto/labo-container-connect/update-images ]; then
      for target in $(cat ~/.labo-connect-update-images); do
        connect_update_target $target
      done
    fi
  fi
}
connect_update_target(){
  local update_image
  local base

  update_image=$1

  if [ -n "$update_image" ]; then
    echo docker pull $update_image

    for base in $(docker image ls --format="{{.Repository}}:{{.Tag}} {{.ID}}" | grep ${update_image%%:*} | grep none | awk '{ print $2 }'); do
      echo docker image rm $base
    done
  fi
}
connect_container_exists(){
  docker ps "$@" -f name=$name --format '{{.ID}} {{.Names}}' | grep $name'$'
}

connect_main "$@"
